################################################## REQUIREMENTS: ##################################################

Flags:
    // Super required
    -l - List in long format. If the output is to a terminal, a total sum for all the file sizes is output on a line before the long listing;

    // High required
 ✓ -R - Recursively list subdirectories encountered;
 ✓ -a - Include directory entries whose names begin with a dot (.);
 ✓ -A - List all entries except for . and .. .  Always set for the superuser;
    -G - Enable colorized output;
    -h - Sizes are human readable;
    -@ - Display extended attribute keys and sizes in long (-l) output; // What is fucking that!?
    -e - Print the Access Control List (ACL) associated with the file, if present, in long (-l) output;
    -T - When used with the -l option, display complete time information for the file, including month, day, hour, minute, second, and year;

    // Medium required
    -1 - Force output to be one entry per line.  This is the default when output is not to a terminal;
    -C - Force multi-column output; this is the default when output is to a terminal;

    // Low required
    -r - Reverse the order of the sort to get reverse lexicographical order or the oldest entries first (or largest files last,
         if combined with sort by size;
    -t - Sort by time modified (most recently modified first) before sorting the operands by lexicographical order;
    -u - Use time of last access, instead of last modification of the file for sorting (-t) or long printing (-l);
    -c - Use time when file status was last changed for sorting (-t) or long printing (-l);
    -S - Sort files by size;

################################################## ALLOWED FUNCTIONS: ##################################################

Basic:
    ssize_t write(int fd, const void *buf, size_t count);
    void *malloc(size_t size);
    size_t malloc_size (void *ptr); / size_t malloc_usable_size (void *ptr);
    void free(void *ptr);
    void exit(int status);

Error handling:
    void perror(const char *s);
    char *strerror(int errnum);

Directory reading:
    DIR *opendir(const char *name);
    struct dirent *readdir(DIR *dirp);
    int closedir(DIR *dirp);

More information about entry:
    int stat(const char *pathname, struct stat *statbuf);
    int lstat(const char *pathname, struct stat *statbuf);
    struct passwd *getpwuid(uid_t uid);
    struct group *getgrgid(gid_t gid);

################################################## SYSTEM STRUCTURES: ##################################################

struct stat {
    dev_t     st_dev;         /* ID of device containing file */
    ino_t     st_ino;         /* Inode number */
    mode_t    st_mode;        /* File type and mode */
    nlink_t   st_nlink;       /* Number of hard links */
    uid_t     st_uid;         /* User ID of owner */
    gid_t     st_gid;         /* Group ID of owner */
    dev_t     st_rdev;        /* Device ID (if special file) */
    off_t     st_size;        /* Total size, in bytes */
    blksize_t st_blksize;     /* Block size for filesystem I/O */
    blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

    /* Since Linux 2.6, the kernel supports nanosecond
        precision for the following timestamp fields.
        For the details before Linux 2.6, see NOTES. */

    struct timespec st_atim;  /* Time of last access */
    struct timespec st_mtim;  /* Time of last modification */
    struct timespec st_ctim;  /* Time of last status change */

#define st_atime st_atim.tv_sec      /* Backward compatibility */
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
};

struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user ID */
    gid_t   pw_gid;        /* group ID */
    char   *pw_gecos;      /* user information */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};

struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group ID */
    char  **gr_mem;         /* NULL-terminated array of pointers
                                to names of group members */
};

################################################## DESIGNING: ##################################################

By default there is . in arguments.

There are three types of flags.

1. Elements selection:
    ✓ -A - do not list implied . and ..;
    ✓ -a - do not ignore entries starting with .;
    -f - Output is not sorted. This option turns on the -a option;
    ✓ -R - recursively, по всем папкам и по папкам что в папках и тд;
    ✓ -d - directories are listed as plain files (not searched recursively);

2 Sorting:
    -f - Output is not sorted. This option turns on the -a option;
    -t - Sorting by last modified;
    -c - Use time when file status was last changed for sorting (-t) or long printing (-l);
    -u - Use time of last access, instead of last modification of the file for sorting (-t) or long printing (-l);
    -U - Use time of file creation, instead of last modification for sorting (-t) or long output (-l);
    -r - Reverse the order of the sort to get reverse lexicographical order or the oldest entries first (or largest files last, if combined
         with sort by size;
    -S - Sort files by size;

3 Printing:
    3.1 Additional information
        -l - List in long format. If the output is to a terminal, a total sum for all the file sizes is output on a line before the long
             listing;
        -g - Like -l but without owner;
        -o - Like -l but without group information;
        -e - Print the Access Control List (ACL) associated with the file, if present, in long (-l) output;
        -@ - Display extended attribute keys and sizes in long (-l) output;
        -c - Use time when file status was last changed for sorting (-t) or long printing (-l);
        -e - Print the Access Control List (ACL) associated with the file, if present, in long (-l) output;
        -T - When used with the -l (lowercase letter ``ell'') option, display complete time information for the file, including month, day,
             hour, minute, second, and year.
    3.2 Output modes:
        -C - Force multi-column output; this is the default when output is to a terminal;
        -1 - (The numeric digit ``one''.) Force output to be one entry per line. This is the default when output is not to a terminal;
        -m - Stream output format; list files across the page, separated by commas;
        ✖ -x - The same as -C, except that the multi-column output is produced with entries sorted across, rather than down, the columns;
    ✖ -H - Symbolic links on the command line are followed.  This option is assumed if none of the -F, -d, or -l options are specified.
    -h - Sizes are human readable;
    ✖ -B - Force printing of non-printable characters (as defined by ctype(3) and current locale settings) in file names as \xxx, 
            where xxx is the numeric value of the character in octal;
    ✖ -b - As -B, but use C escape codes whenever possible;
    -G - Enable colorized output. This option is equivalent to defining CLICOLOR in the environment;
    ✖ -i - For each file, print the file's file serial number (inode number);
    ✖ -k - If the -s option is specified, print the file size allocation in kilobytes, not blocks.  This option overrides the environment
            variable BLOCKSIZE;
    ✖ -L - Follow all symbolic links to final target and list the file or directory the link references rather than the link itself.  This
            option cancels the -P option;
    ✖ -n - Display user and group IDs numerically, rather than converting to a user or group name in a long (-l) output.  This option turns
            on the -l option;
    ✖ -O - Include the file flags in a long (-l) output;
    ✖ -o - List in long format, but omit the group id;
    ✖ -P - If argument is a symbolic link, list the link itself rather than the object the link references.  This option cancels the -H and
            -L options;
    -p - Write a slash (`/') after each filename if that file is a directory;
    ✖ -q - Force printing of non-graphic characters in file names as the character `?'; this is the default when output is to a terminal;
    ✖ -s - Display the number of file system blocks actually used by each file, in units of 512 bytes, where partial units are rounded up
            to the next integer value.  If the output is to a terminal, a total sum for all the file sizes is output on a line before the
            listing.  The environment variable BLOCKSIZE overrides the unit size of 512 bytes;
    
    ✖ -v - Force unedited printing of non-graphic characters; this is the default when output is not to a terminal;
    ✖ -W - Display whiteouts when scanning directories.  (-S) flag);
    ✖ -w - Force raw printing of non-printable characters.  This is the default when output is not to a terminal;
    

    


Узнать ширину терминала:
    int width = 0;
    ioctl(0, TIOCGWINSZ, &width);
    width >>= 16;

