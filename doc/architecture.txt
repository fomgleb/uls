################################################## REQUIREMENTS: ##################################################

Flags:
    // Super required
    -l - List in long format. If the output is to a terminal, a total sum for all the file sizes is output on a line before the long listing;

    // High required
    -R - Recursively list subdirectories encountered;
    -a - Include directory entries whose names begin with a dot (.);
    -A - List all entries except for . and .. .  Always set for the superuser;
    -G - Enable colorized output;
    -h - Sizes are human readable;
    -@ - Display extended attribute keys and sizes in long (-l) output; // What is fucking that!?
    -e - Print the Access Control List (ACL) associated with the file, if present, in long (-l) output;
    -T - When used with the -l option, display complete time information for the file, including month, day, hour, minute, second, and year;

    // Medium required
    -1 - Force output to be one entry per line.  This is the default when output is not to a terminal;
    -C - Force multi-column output; this is the default when output is to a terminal;

    // Low required
    -r - Reverse the order of the sort to get reverse lexicographical order or the oldest entries first (or largest files last,
         if combined with sort by size;
    -t - Sort by time modified (most recently modified first) before sorting the operands by lexicographical order;
    -u - Use time of last access, instead of last modification of the file for sorting (-t) or long printing (-l);
    -c - Use time when file status was last changed for sorting (-t) or long printing (-l);
    -S - Sort files by size;

################################################## ALLOWED FUNCTIONS: ##################################################

Basic:
    ssize_t write(int fd, const void *buf, size_t count);
    void *malloc(size_t size);
    size_t malloc_size (void *ptr); / size_t malloc_usable_size (void *ptr);
    void free(void *ptr);
    void exit(int status);

Error handling:
    void perror(const char *s);
    char *strerror(int errnum);

Directory reading:
    DIR *opendir(const char *name);
    struct dirent *readdir(DIR *dirp);
    int closedir(DIR *dirp);

More information about entry:
    int stat(const char *pathname, struct stat *statbuf);
    int lstat(const char *pathname, struct stat *statbuf);
    struct passwd *getpwuid(uid_t uid);
    struct group *getgrgid(gid_t gid);

################################################## SYSTEM STRUCTURES: ##################################################

struct stat {
    dev_t     st_dev;         /* ID of device containing file */
    ino_t     st_ino;         /* Inode number */
    mode_t    st_mode;        /* File type and mode */
    nlink_t   st_nlink;       /* Number of hard links */
    uid_t     st_uid;         /* User ID of owner */
    gid_t     st_gid;         /* Group ID of owner */
    dev_t     st_rdev;        /* Device ID (if special file) */
    off_t     st_size;        /* Total size, in bytes */
    blksize_t st_blksize;     /* Block size for filesystem I/O */
    blkcnt_t  st_blocks;      /* Number of 512B blocks allocated */

    /* Since Linux 2.6, the kernel supports nanosecond
        precision for the following timestamp fields.
        For the details before Linux 2.6, see NOTES. */

    struct timespec st_atim;  /* Time of last access */
    struct timespec st_mtim;  /* Time of last modification */
    struct timespec st_ctim;  /* Time of last status change */

#define st_atime st_atim.tv_sec      /* Backward compatibility */
#define st_mtime st_mtim.tv_sec
#define st_ctime st_ctim.tv_sec
};

struct passwd {
    char   *pw_name;       /* username */
    char   *pw_passwd;     /* user password */
    uid_t   pw_uid;        /* user ID */
    gid_t   pw_gid;        /* group ID */
    char   *pw_gecos;      /* user information */
    char   *pw_dir;        /* home directory */
    char   *pw_shell;      /* shell program */
};

struct group {
    char   *gr_name;        /* group name */
    char   *gr_passwd;      /* group password */
    gid_t   gr_gid;         /* group ID */
    char  **gr_mem;         /* NULL-terminated array of pointers
                                to names of group members */
};

################################################## DESIGNING: ##################################################

By default there is . in arguments.

There are three types of flags.

1. Elements selection:
    -A - do not list implied . and ..;
    -a - do not ignore entries starting with .;
    -R - recursively, по всем папкам и по папкам что в папках и тд;
    -d - directories are listed as plain files;

2. Additional information:
    -l - List in long format. If the output is to a terminal, a total sum for all the file sizes is output on a line before the long listing;
    -t - Sorting by last modified.


2. Sorting:
    Flags:
        -c - with -lt: sort by modification time; with -l: sort by name; otherwise: sort by ctime, newest first

3. Дополнительная информация:
    Флаги:
        -l - List in long format. If the output is to a terminal, a total sum for all the file sizes is output on a line before the long listing;
        -g - without owner;
        -o - without group information;
        -h - Sizes are human readable;

Printing:
    -C - Force multi-column output; this is the default when output is to a terminal.


Узнать ширину терминала:
    int width = 0;
    ioctl(0, TIOCGWINSZ, &width);
    width >>= 16;

